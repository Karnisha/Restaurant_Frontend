{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Updatedisplay() {\n  _s();\n  const {\n    sid\n  } = useParams();\n  const [service, setService] = useState({\n    serviceName: \"\",\n    serviceCost: \"\",\n    serviceDescription: \"\",\n    serviceImage: null\n  });\n  const [validation, valchange] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    axios.get(`http://localhost:5151/api/Backend/GetById/${sid}`).then(res => {\n      const servicedata = res.data;\n      setService(servicedata);\n      console.log(\"Get data:\", servicedata);\n    }).catch(error => {\n      if (error.response && error.response.status === 404) {\n        console.log(\"Service not found\");\n      }\n      console.log(\"Error:\", error.message);\n    });\n  }, [sid]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setService(prevService => ({\n      ...prevService,\n      [name]: value\n    }));\n  };\n  const handleImageChange = e => {\n    setService({\n      ...service,\n      serviceImage: e.target.files[0]\n    });\n  };\n  const handlesubmit = e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"serviceName\", service.serviceName);\n    formData.append(\"serviceCost\", service.serviceCost);\n    formData.append(\"serviceDescription\", service.serviceDescription);\n    formData.append(\"serviceImage\", service.serviceImage);\n    if (!isNaN(service.serviceName) || !isNaN(service.serviceDescription)) {\n      alert('Name cannot have an integer');\n    } else {\n      axios.put(`http://localhost:5151/api/Backend/UpdateService/${sid}`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        alert('Updated successfully.');\n        navigate(\"/AdminDisplay\");\n      }).catch(error => {\n        console.log(\"Error:\", error.message);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // Your JSX for the form goes here\n  // ...\n  ;\n}\n_s(Updatedisplay, \"k0MobcONHchu8GeCEGbgaIowQxg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Updatedisplay;\n;\nvar _c;\n$RefreshReg$(_c, \"Updatedisplay\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","useNavigate","Updatedisplay","sid","service","setService","serviceName","serviceCost","serviceDescription","serviceImage","validation","valchange","navigate","get","then","res","servicedata","data","console","log","catch","error","response","status","message","handleChange","e","name","value","target","prevService","handleImageChange","files","handlesubmit","preventDefault","formData","FormData","append","isNaN","alert","put","headers"],"sources":["D:/Micro/Restaurant_Booking_React/src/RestaurantDetails/RestaurantUpdate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nexport default function Updatedisplay() {\r\n    const { sid } = useParams();\r\n \r\n    const [service, setService] = useState({\r\n        serviceName: \"\",\r\n        serviceCost: \"\",\r\n        serviceDescription: \"\",\r\n        serviceImage: null\r\n    });\r\n \r\n    const [validation, valchange] = useState(false);\r\n    const navigate = useNavigate();\r\n \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:5151/api/Backend/GetById/${sid}`)\r\n            .then((res) => {\r\n                const servicedata = res.data;\r\n                setService(servicedata);\r\n                console.log(\"Get data:\", servicedata)\r\n            })\r\n            .catch((error) => {\r\n                if (error.response && error.response.status === 404) {\r\n                    console.log(\"Service not found\")\r\n                }\r\n                console.log(\"Error:\", error.message);\r\n            });\r\n    }, [sid]);\r\n \r\n \r\n \r\n    const handleChange = (e) => {\r\n \r\n        const { name, value } = e.target;\r\n \r\n        setService(prevService => ({\r\n \r\n            ...prevService,\r\n \r\n            [name]: value\r\n \r\n        }));\r\n \r\n    };\r\n    const handleImageChange = (e) => {\r\n \r\n        setService({\r\n \r\n            ...service,\r\n \r\n            serviceImage: e.target.files[0],\r\n \r\n        });\r\n \r\n    };\r\n    const handlesubmit = (e) => {\r\n \r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append(\"serviceName\", service.serviceName);\r\n        formData.append(\"serviceCost\", service.serviceCost);\r\n        formData.append(\"serviceDescription\", service.serviceDescription);\r\n        formData.append(\"serviceImage\", service.serviceImage);\r\n \r\n \r\n        if (!isNaN(service.serviceName) || !isNaN(service.serviceDescription)) {\r\n            alert('Name cannot have an integer');\r\n        }\r\n        else {\r\n            axios.put(`http://localhost:5151/api/Backend/UpdateService/${sid}`, formData, {\r\n                headers: { \"Content-Type\": \"multipart/form-data\" }\r\n            })\r\n                .then((res) => {\r\n                    alert('Updated successfully.');\r\n                    navigate(\"/AdminDisplay\");\r\n                })\r\n \r\n                .catch((error) => {\r\n                    console.log(\"Error:\", error.message);\r\n                });\r\n        }\r\n    };\r\n  return (\r\n    <>\r\n    </>\r\n    // Your JSX for the form goes here\r\n    // ...\r\n  );\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}